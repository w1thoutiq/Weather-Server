from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message

from core.utils.simple_func import *
from core.keyboards.inline import *
from core.keyboards.reply import *
from core.utils.session_db import *
from core.utils.connect_db import *
from core.handlers.basic import set_default_commands
from core.utils.graph import admin_graph


@flags.chat_action('typing')
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start
async def cmd_start(message: Message, bot: Bot):
    await set_default_commands(bot)
    with create_session() as db:
        users = [user[0] for user in db.query(User.id).all()]
        if message.from_user.id not in users:
            await message.answer(
                f'–ü—Ä–∏–≤–µ—Ç, ***{message.from_user.first_name}*** \U0001F609 !\n'
                f'–Ø Telegram-–±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –ª—é–±–æ–º —Ä–µ–≥–∏–æ–Ω–µ. '
                f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏—Ç–µ "help".'
                f'\n–ò–ª–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.\n',
                parse_mode='Markdown',
                reply_markup=mark())
            await bot.send_message(
                message.chat.id,
                f'–í–∏–∂—É —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ, '
                f'–Ω–∞–ø–∏—à–∏—Ç–µ "/manage" –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω'
                f' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.'
                f'\n–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π —Ä–µ–≥–∏–æ–Ω, '
                f'–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–≥–æ–¥—É –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ \U000026C5',
                parse_mode=''
            )
            db.add(User(
                id=message.from_user.id,
                username=message.from_user.username,
                active=True
            ))
        else:
            await bot.send_message(
                message.chat.id,
                f'–ü—Ä–∏–≤–µ—Ç, ***{message.from_user.first_name}*** \U0001F609!\n'
                f'–Ø —Ç–µ–±—è –ø–æ–º–Ω—é!\n'
                f'–ù–∞–∂–º–∏ "help" –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.\n'
                f'–ù–∞–ø–∏—à–∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã \U000026C5',
                reply_markup=mark(),
                parse_mode='Markdown')
            await message.answer(
                '–ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ "–ü–æ–≥–æ–¥–∞"',
                reply_markup=get_weather_button())
            db.query(User).where(User.id == message.from_user.id).update(
                {User.active: True}
            )
        db.commit()


@flags.chat_action('typing')
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ /help
async def cmd_help(message: [Message, CallbackQuery], bot: Bot):
    text = f'–Ø –ø–æ–Ω–∏–º–∞—é —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n'\
           f'/start\n/help\n/developer\n/manage\n'\
           f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω.\n'\
           f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–∞–∂–º–∏ "–ø–æ–≥–æ–¥–∞"'
    if type(message) is CallbackQuery:
        await message.answer()
        await bot.send_message(
            message.message.chat.id,
            text=text,
            parse_mode='',
            reply_markup=get_weather_button())
    elif type(message) is Message:
        await bot.send_message(
            message.chat.id,
            text=text,
            parse_mode='',
            reply_markup=get_weather_button())
    with create_session() as db:
        db.query(User).where(User.id == int(message.from_user.id)).update(
            {User.active: True})
        db.commit()


@flags.chat_action('typing')
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ /manage
async def cmd_manage(message: Message):
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=menu())


@flags.chat_action('typing')
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ /developer
async def cmd_developer(message: Message, bot: Bot):
    await bot.send_message(
        message.chat.id,
        text='<strong>@w1thoutiq</strong>',
        reply_markup=admin(), parse_mode='HTML'
    )


@flags.chat_action('typing')
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ /message
async def cmd_message(message: Message, bot: Bot):
    count_right = 0
    count_left = 0
    with create_session() as db:
        users = [int(user[0]) for user in db.query(User.id).all()]
        for user in users:
            try:
                await get_weather_for_cities(
                    user_id=user, bot=bot, chat_id=user
                )
                if db.query(User.active).where(User.id == user) is False:
                    db.query(User).where(User.id == user).update(
                        {User.active: True})
                count_right += 1
            except TelegramBadRequest:
                count_left += 1
                db.query(User).where(User.id == user).update(
                    {User.active: False})
        await message.answer(
            text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\r"
                 f"–£–¥–∞—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{count_right}</b>\n\r"
                 f"–ù–µ —É–¥–∞—á–Ω—ã—Ö: <b>{count_left}</b>\n\r"
                 f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{count_left + count_right}</b>",
            parse_mode='html'
        )


@flags.chat_action('typing')
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ "–ü–æ–≥–æ–¥–∞"
async def weather(message: Message):
    with create_session() as db:
        cities = db.query(User.city).where(
            User.id == int(message.from_user.id)).first()[0].split(', ')
    await message.answer(text='–î–ª—è –∫–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?',
                         reply_markup=weather_btn(cities))


@flags.chat_action('typing')
async def call_alerts_message(message: Message, bot: Bot):
    await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
    await alerts_message(bot=bot)


@flags.chat_action('typing')
# state=StateAlerts.subscribe
async def second_step_alert(message: Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer(f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu())
    else:
        with create_session() as db:
            city = message.text.capitalize()
            try:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if get_weather(city) is None:
                    raise ValueError
                if db.query(Alert).where(
                        Alert.id == int(message.from_user.id)).first() is None:
                    db.add(Alert(
                        id=message.from_user.id,
                        username=message.from_user.username,
                        city=city
                    ))
                else:
                    db.query(Alert).where(
                        Alert.id == int(message.from_user.id)).update(
                        {
                            Alert.id: message.from_user.id,
                            Alert.city: city,
                            Alert.username: message.from_user.username
                        }
                    )
                data = await state.get_data()
                call = data.get('call')
                await call.message.edit_text(
                    text='–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üéâ',
                    reply_markup=menu()
                )
                await state.clear()
            except ValueError:
                await message.reply(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! \U0001F915'
                                    f'\n–ù–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏',
                                    reply_markup=cancel())
            finally:
                db.commit()
                await message.delete()


@flags.chat_action('typing')
# state=StateSet.city
async def set_city(message: Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer(f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu())
    else:
        city = message.text.capitalize()
        try:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if get_weather(city) is None:
                raise ValueError
            await state.update_data(city=city)
            await message.answer(f'–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ä–µ–≥–∏–æ–Ω–æ–º?',
                                 reply_markup=add_city_menu()
                                 )
        except ValueError:
            await message.reply(
                f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! \U0001F915'
                f'\n–ù–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏',
                reply_markup=cancel()
                                )


@flags.chat_action('typing')
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–æ–¥, —Ç–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ—Ç –ø–æ–≥–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def unknown_message_text(message: Message):
    try:
        city = message.text.capitalize()
        await message.answer(
            text=get_weather(city),
            parse_mode='HTML'
        )
    except Exception:
        await message.reply(f'\U0001F915 –°—Ç—Ä–∞–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')


@flags.chat_action('upload_photo')
async def send_graph_admin(message: Message, bot: Bot):
    city = message.text[7::].capitalize()
    admin_graph(city)
    try:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=FSInputFile(f'Graph\\{city}\\{datetime.now().date()}.png'),
            caption=f'–ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥—ã –≥–æ—Ä–æ–¥–∞ - <b>{city}</b> –∑–∞'
                    f' <b>{datetime.now().date()}</b>'
        )
    except TelegramNetworkError:
        await message.answer('–ì—Ä–∞—Ñ–∏–∫ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ ‚ò†')


@flags.chat_action('upload_document')
async def upload_database(message: Message):
    try:
        await message.answer_document(
            document=FSInputFile(f'DataBase.db'),
            caption=f'–í–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
        )
    except TelegramNetworkError:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


@flags.chat_action('typing')
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ-–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –æ—à–∏–±–æ–∫
async def unknown_message(message: Message):
    await message.reply(f'–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å, –Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é,\n'
                        f'—á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help',
                        parse_mode='Markdown', reply_markup=mark())
