from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from core.utils.states import StateAlerts
from core.keyboards.inline import menu
from core.keyboards.reply import cancel
from core.database.tables.Alert import Alert
from core.utils.other import get_weather
from core.database.Connector import Connector

router = Router()


@router.message(F.text and StateAlerts.subscribe)
async def second_step_alert(message: Message, state: FSMContext, connector: Connector):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer(f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu())
    else:
        with connector.connector() as db:
            city = message.text.capitalize()
            try:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                checkout = get_weather(city, timezone=True)
                if checkout is None:
                    raise ValueError
                if db.query(Alert).where(
                        Alert.telegram_id == message.from_user.id).first() is None:
                    db.add(Alert(
                        telegram_id=message.from_user.id,
                        username=message.from_user.username,
                        city=city,
                        timezone=checkout
                    ))
                else:
                    db.query(Alert).where(
                        Alert.telegram_id == int(message.from_user.id)).update(
                        {
                            Alert.telegram_id: message.from_user.id,
                            Alert.city: city,
                            Alert.username: message.from_user.username,
                            Alert.timezone: checkout
                        }
                    )
                data = await state.get_data()
                call = data.get('call')
                await call.message.edit_text(
                    text='–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üéâ',
                    reply_markup=menu()
                )
                await state.clear()
            except ValueError:
                await message.answer(
                    f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! \U0001F915'
                    f'\n–ù–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏',
                    reply_markup=cancel()
                )
            finally:
                db.commit()
                await message.delete()
